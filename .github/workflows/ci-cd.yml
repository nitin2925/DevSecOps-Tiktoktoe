name: CI/CD Pipeline

on:
  push: 
    branches: [ main ]
    paths-ignore:
     - 'kubernetes/deployment.yaml' #Ignore changes to this file to prevent loops
  pull_request:
    branches: [ main ]

jobs: 
  test: 
    name: Unit Testing
    runs-on: self-hosted
    steps:
      - name: checkout code
        uses: actions/checkout@v4.2.2

      - name: setup node.js
        uses: actions/setup-node@v4.2.0
        with: 
          node-version: '20'
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: run tests
        run: npm test || echo " no tests found, would add in a real project"

  lint: 
    name: static code analysis
    runs-on: self-hosted
    steps: 
      - name: checkout code
        uses: actions/checkout@v4.2.2

      - name: setup node.js
        uses: actions/setup-node@v4.2.0
        with: 
          node-version: '20'
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  Build: 
    name: Build
    runs-on: self-hosted
    needs: [test, lint]
    steps:
      - name: checkout code
        uses: actions/checkout@v4.2.2

      - name: setup node.js
        uses: actions/setup-node@v4.2.0
        with: 
          node-version: '20'
          cache: npm

      - name: Install Dependencies
        run: npm ci
      
      - name: Build Project
        run: npm run build

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with: 
          name: build artifacts
          path: dist/

  docker:
    name: docker build and oush
    runs-on: self-hosted
    needs: [Build]
    env: 
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs: 
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps: 
      - name: checkout code
        uses: actions/checkout@v4

      - name: download build artifacts
        uses: actions/download-artifact@v4
        with: 
          name: build artifcats
          path: dist/


      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
      - name: login to github container registry
        uses: docker /login-action@v3
        with: 
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: extract metadata for docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha, format=long
            type=ref, event=branch
            latest

      - name: build docker image
        uses: docker/build-push-action@v5
        with: 
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with: 
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set image tag output
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: self-hosted
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
      
      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"
          
          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml
      
      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push
        
    

    
    




        



        
    
